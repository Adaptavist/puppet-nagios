#!/usr/bin/env python

import base64
import getopt
import sys
import urllib2
import time

def get_response(url,username,password):
  request = urllib2.Request(url)
  base64string = base64.encodestring('%s:%s' % (username, password)).replace('\n', '')
  request.add_header("Authorization", "Basic %s" % base64string)   
  try:
    response = urllib2.urlopen(request)
  except urllib2.HTTPError, e:
    if e.getcode() == 404:
      content = e.read()
      print "Page not found! " + url
      sys.exit(3)
    if e.getcode() == 401:
      content = e.read()
      print "Authentication Failure!"
      sys.exit(3)
    else:
      raise
  return response

def main(argv):
  username = ''
  password = ''
  warning = 0
  critical = 0
  url = 'http://localhost:80/'

  try:
    opts, args = getopt.getopt(argv,"u:p:h:w:c:", ["help"])
  except getopt.GetoptError:
    print 'Wrong Arguments... See --help output.'
    sys.exit(2)
  for opt, arg in opts:
    if opt == '--help':
      print sys.argv[0] + ' -h $HOSTNAME -l $LINK [-u <username>] [-p <password>]'
      print 'Example usage:'
      print '  ' + sys.argv[0] + ' -h www.example.com -l /my/status -u admin -p xxx'
      sys.exit()
    elif opt in ("-u", "--user"):
      username = arg
    elif opt in ("-p", "--password"):
      password = arg
    elif opt in ("-h", "--host", "--url"):
      url = arg
    elif opt in ("-w", "--warning"):
      warning = int(arg)
    elif opt in ("-c", "--critical"):
      critical = int(arg)

  try:
    start_time = time.time()
    response = get_response(url,username,password)
    response_time = int((time.time() - start_time)*1000) # providing output in miliseconds, int, no need for float
  except:
    print 'Can\'t connect to: ' + url
    sys.exit(2)

  out = response.read()
  response_size = sys.getsizeof(out)

  if ((response_time < warning) and (response_time > 0)) \
    or (critical==0 or warning==0):
    print 'OK response_time:' + str(response_time) + ' ms|' + 'response_time(ms)=' + str(response_time)# + \
    #  ' response_size=' + str(response_size)
    sys.exit(0)
  if response_time >= critical:
    print 'CRITICAL response_time:' + str(response_time) + ' ms|' + 'response_time(ms)=' + str(response_time)# + \
    #  ' response_size=' + str(response_size)
    sys.exit(2)
  if response_time >= warning:
    print 'WARNING response_time:' + str(response_time) + ' ms|' + 'response_time(ms)=' + str(response_time)# + \
    #  ' response_size=' + str(response_size)
    sys.exit(1)
  print 'UNKNOWN'
  sys.exit(3)

if __name__ == '__main__':
  main(sys.argv[1:])

